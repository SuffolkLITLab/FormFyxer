description: "FormFyxer Field Renaming Quality Assessment - Practical Evaluation"

providers:
  - id: openai:gpt-4o
    config:
      temperature: 0.3
      max_tokens: 150

prompts:
  - |
    You are a field renaming assistant for legal forms. Your task is to rename form fields to follow Assembly Line conventions:
    
    1. Use snake_case (underscores instead of spaces)
    2. Make field names descriptive and clear
    3. Use lowercase letters only
    4. Output ONLY the new field name, nothing else
    
    Original field: "{{original_field}}"
    Context: This field appears on a legal form ({{pdf_name}}) with these other fields: {{all_fields}}
    
    New field name:

tests:
  - file://formfyxer/tests/field_renaming_dataset.csv

defaultTest:
  assert:
    # Quality Assessment 1: Must be snake_case
    - type: javascript
      value: |
        // Check if output is proper snake_case (lowercase with underscores)
        const output_clean = output.trim();
        const isLowercase = output_clean === output_clean.toLowerCase();
        const hasValidChars = /^[a-z][a-z0-9_]*[a-z0-9]$/.test(output_clean);
        const hasUnderscore = output_clean.includes('_');
        return isLowercase && hasValidChars && hasUnderscore;
        
    # Quality Assessment 2: Should be descriptive (reasonable length)
    - type: javascript
      value: |
        const output_clean = output.trim();
        const length = output_clean.length;
        return length >= 5 && length <= 50; // Reasonable field name length
        
    # Quality Assessment 3: Should avoid generic terms
    - type: javascript
      value: |
        const output_clean = output.trim().toLowerCase();
        const generic_terms = ['field', 'text', 'input', 'box', 'item'];
        return !generic_terms.some(term => output_clean === term || output_clean.endsWith('_' + term));

    # Quality Assessment 4: Should be semantically related to original (loose check)
    - type: javascript
      value: |
        const output_clean = output.trim().toLowerCase();
        const original = context.vars.original_field.toLowerCase();
        
        // If original is very generic, accept any reasonable output
        if (original.length <= 3 || ['i', 'page', 'text'].includes(original)) {
          return true;
        }
        
        // Check for shared key words or concepts
        const original_words = original.split(/[\s_\-\.]+/);
        const output_words = output_clean.split('_');
        
        // Look for at least one shared concept or abbreviation
        for (const orig_word of original_words) {
          if (orig_word.length >= 3) {
            for (const out_word of output_words) {
              if (out_word.includes(orig_word.substring(0, 3)) || 
                  orig_word.includes(out_word.substring(0, 3))) {
                return true;
              }
            }
          }
        }
        
        // If no word overlap, that's still okay for complex transforms
        return true;

outputPath: './promptfoo_quality_results.json'

metadata:
  evaluation_type: "quality_assessment"
  focus: "snake_case_compliance_and_descriptiveness"
  dataset_size: 310